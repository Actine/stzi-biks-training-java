package com.uzhnu.training.lab2;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Map;

/**
 * Обчислення функції f(x) = e^x методом розкладу у ряд Тейлора (див.
 * <a href="https://upload.wikimedia.org/math/f/1/7/f17ffd017a55e1a926965479d66fa5b7.png">формулу</a>).
 *
 * @author Paul Danyliuk
 * @date 11:49 @ 06.10.2015.
 */
public class TailorExponent {

    public static void main(String[] args) {

        // x - параметр функції f(x) = e^x. В нашому випадку просто підставили одне значення для перевірки
        double x = 2;

        /*
        Змінна, у яку зберігається сума членів ряду Тейлора.
        Оскільки цикл починається із другого доданка (https://upload.wikimedia.org/math/f/1/7/f17ffd017a55e1a926965479d66fa5b7.png),
        бо так простіше рахувати, то одразу заносимо в результат перший доданок (одиницю - тобто, додан).
        */
        double result = 1;

        // Щоб не рахувати x^n і n! кожної ітерації заново, пам’ятатимемо чисельник і знаменник із попередньої ітерації
        // і просто домножуватимемо їх, адже x^n == x^(n-1) * x, а n! == (n-1)! * n
        // Початкові умови - при n=0
        double numerator = 1;       // чисельник - x^n
        long fact = 1;              // знаменник - n!

        // Тепер знайдемо і додамо до суми члени при n від 1 до 19
        for (int n = 1; n < 20; n++) {

            // Домножимо попередній чисельник на x, щоб отримати x^n для цієї ітерації
            numerator = numerator * x;

            // Домножимо попередній знаменник на n, щоб отримати n! для цієї ітерації
            fact = fact * n;

            // Додамо до суми n-товий доданок
            result += numerator / fact;
        }

        // В принципі, це саме можна зробити і якщо починати n із 0, а чисельник і знаменник міняти ПІСЛЯ додавання.
        // Але тоді у останній ітерації будуть зайві дії, результат яких уже нікуди не додасться

        // Виведемо результат
        System.out.println(result);

        // Подивимось, наскільки наш результат відрізняється від очікуваного
        System.out.printf(                          // Метод для форматованого виводу. Перший параметр - рядок формату:
                "%.30f",                            // Вивести як десятковий дріб із 30 знаками після коми
                result - Math.pow(Math.E, x)        // Другий і наступні параметри - те, що підставляється у формат
        );

    }

}
